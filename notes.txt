Schedule:
    Commence    : 9:00 AM
    Tea Break   : 11:00 AM (15 mins)
    Lunch Break : 1:00 PM (1 hr)
    Tea Break   : 3:30 PM (15 mins)
    Wind up     : 5:00 PM

Methodology:
    No powerpoints
    100% hands on
    From the scratch (No focus on CSS etc)

Code Repository:
    http://github.com/tkmagesh/NT-React-Nov-2021

Software Requirements:
    - Node.js (LTS)
    - Editor (Visual Studio Code)
    - Chrome Browser
    - Git Client

About You:
    Name
    Experience
    Primary Skillset
    Experience in React (if any)
    Any interesting books / tv shows / movies


Agenda:
    - Day 1
       - Problem 
       - Solution (jQuery)
       - Solution (React)
       - JSX
       - ES6 Features
       - React Components

Problem
    - Rich Internet Applications (RIA)

Salary Calculator
    Basic
    HRA
    DA
    Tax (%)
    Gross = Basic + HRA + DA
    Net = Gross - Tax

Assumption 
    #1 : No validations are required
    #2 : A different team is responsible for preparing our application for deployment
    #3 : 100% according the users requirements


Public?
    Any attributed assigned to 'this' 
    Any attributed assigned to 'prototype' 

Reactive (Dumb) X Proactive (Knowledge)


React helps by constructing the UI using VDOM which help in making DOM updates very efficient.


Component
    Encapsulation of Presentation + UI Behavior + State
    Reusable
    Customizable
    Composable

React Components
    Class Component
    Functional Component

ES6 (ECMAScript 6 / ES2015)
    1. let
    2. const
    3. Array destructuring
    4. Rest operator (array)
    5. Spread operator (array)
    6. Object destructuring
    7. Rest operator (object)
    8. Spread operator (object)
    9. Default arguments
    10. Arrow functions
    11. Template Literals
    12. Iterators (for of)
    13. Generators (functions whose execution can be suspended and resumed)
    14. Object construction enhancements
    15. Class
    (To be discussed later)
    16. Modules
    17. Promises
    18. Async Await

Day-2 Assignment
    Array Methods
        filter
        forEach
        map
        reduce


Function Invocation Patterns
    1. As a method of an obj
        this -> obj
    2. As a function
        this -> global scope (window in the browser)
    3. Using the 'call' method
    4. Using the 'apply' method
    

HTML & JSX
    HTML
        Open tags without corresponding close tags are allowed
        "for" attribute is allowed
        "class" attribute is allowed
    JSX
        Every open tag MUST have a corresponding close tag
        Use "htmlFor" in place of "for" attribute
        use "className" inplace of "class" attribute


Convert the following HTML to a 'Greeter' component
<h1>Greeter</h1>
<hr>
<label for="">User Name:</label>
<input type="text" name="" id="">
<button>Greet</button>
<div>[greeting]</div>

Build a calculator using any of the following template
<h1>Calculator</h1>
<hr>
<input type="number" name="" id="">
<input type="number" name="" id="">
<br>
<button>Add</button>
<button>Subtract</button>
<button>Multiply</button>
<button>Divide</button>
<div>[Result]</div>


================================================

<h1>Caluclator</h1>
<hr>
<input type="number" name="" id="">
<select name="" id="">
    <option value="add">Add</option>
    <option value="subtract">Subtract</option>
    <option value="multiply">Multiply</option>
    <option value="divide">Divide</option>
</select>
<input type="number" name="" id="">
<button>Calculate</button>
<div>[Result]</div>

================================================
Solve the Salary Calculator using React

Questions
    1. If we have to use the model, why there is a 'state' feature in react components?
    2. why the controls are read-only when a 'value' is hardcoded?


Class Components
    1. Component instances need to be created
    2. Life cycle methods of the components need to be executed even when they are not overridden

Function Components
    1. Functions as components
    2. Component instances do not need to be created
    3. Life cycle methods of the components need not be executed even when they are not overridden
    4. side effects are handled using react hooks
        hooks are functions that can be used to manage state and other side effects
        hook function names must start with 'use'

Assignment
Convert the NT-React-Nov-2021/05-react-fc/02-calculator-composition.html into a functional component


npx http-server -c -1

State
    UI State
        - data that supports the 'presentation (UI) needs' of the application
        - it is highly UNLIKELY that a change in this state need to be recogized by other parts of the application
        - feel free to maintain this in the component (using the this.state OR React.useState() )

    App State
        - data that supports the 'business logic (business needs) of the application'
        - it is highly LIKELY that a change in this state need to be recogized by other parts of the application
        - DO NOT maintain this in the component state 
        - Maintain this data outside the component in such a way a change in this state can be easily recognized by other parts of the application


Actions
    Objects
    Must have 'type' attribute to uniquely identify an action throughout the application
    May also have optional 'payload' attribute


Installing yarn
    npm install yarn -g

To create a react application
    yarn create react-app <app-name>

To configure the proxy
    https://nt-docs.apps.system.pcf.ntrs.com/cdd-docs/ui/environment-setup/windows/

To install redux
    yarn add redux

To start the application
    yarn start

ES6 Modules
    1. Everything defined in a .js file is considered private by default
    2. Any public entity has to be explicitly 'exported'
    3. Any public entity from another file has to be explicitly 'imported' in order to be used

calc.js
    func add(){

    }


Container Component / Smart Component
    Receives data from the redux store
    Receives action dispatchers
    Passes the data and action dispatchers to the child components
    DONOT interact with the user directly (UI logic)
    Advicable to have fewer components

Presentation Component / Dumb Component
    Receives data and action dispatchers from container component
    Renders the UI
    App can have as many presentation components as needed

App Folder Structure
    src
        bugs
            actions
                addNew.js
                toggle.js
                remove.js
                removeClosed.js
                index.js
            components (all the presentation components)
                BugSort.jsx
                BugStats.jsx
                BugEdit.jsx
                BugList.jsx
                BugItem.jsx
            reducers
                bugsReducer.js
            index.js
        store
            index.js

react-redux
    (to install : yarn add react-redux)
    Provider
    hooks
        useSelector
            to access store state from the store

        useDispatch
            to get the access to the 'dispatch' from the store


redux middleware
    to encapsulate any application logic common across more than one action

Installing redux-devtools
    yarn add -D redux-devtools-extension
    Install the chrome extension from https://chrome.google.com/webstore/detail/redux-devtools/lmhkpmbekcpmknklioeibfkpmmfibljd
    configure the store